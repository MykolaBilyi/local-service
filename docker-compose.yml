services:
  cert:
    build:
      args:
      - CA_SUBJECT=${CA_SUBJECT-/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN}
      - CERT_SUBJECT=${CERT_SUBJECT-/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN}
      - CERT_EXTENSIONS=${CERT_EXTENSIONS-subjectAltName=DNS:$DOMAIN,DNS:*.$DOMAIN}
      dockerfile_inline: |
        FROM alpine:3

        ARG CA_SUBJECT=/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN
        ARG CERT_SUBJECT=/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN
        ARG CERT_EXTENSIONS=subjectAltName=DNS:$DOMAIN,DNS:*.$DOMAIN
        
        RUN apk add --no-cache openssl && \
            mkdir -p /opt/certs
        WORKDIR /opt/certs

        # Generate Local CA
        RUN \
            # Generate CA key 
            openssl genrsa -aes256 -passout pass:pass -out ca.key 4096 && \
            # Generate CA cert 
            openssl req -x509 -new -nodes -key ca.key -utf8 -passin pass:pass -sha256 -days 3650 -out ca.cert -subj "$$CA_SUBJECT" && \
            # Generate Service key
            openssl genrsa -out ssl.cert.key 2048 && \
            # Generate Service CSR
            openssl req -new -key ssl.cert.key -utf8 -out service.csr -subj "$$CERT_SUBJECT" && \
            # Generate Service cert
            openssl x509 -req -in service.csr -CA ca.cert -CAkey ca.key -passin pass:pass -CAcreateserial -out ssl.cert -days 825 -sha256 \
                -extfile <(echo "$$CERT_EXTENSIONS") && \
            # Clean up       
            rm -f ca.key service.csr
        
        VOLUME /cert_storage
        VOLUME /trusted_storage
        CMD ["sh", "-c", " \
          cp -f /opt/certs/ssl.cert.key /opt/certs/ssl.cert /cert_storage; \
          cp -f /opt/certs/ca.cert /trusted_storage; \
        "]
    volumes:
    - cert:/cert_storage
    - authority:/trusted_storage
    profiles:
      - local

  vpn:
    image: tailscale/tailscale:latest
    hostname: ${HOSTNAME:-$COMPOSE_PROJECT_NAME}
    environment:
    - TS_AUTHKEY=${TS_AUTHKEY:?Need to set TS_AUTHKEY}
    - TS_STATE_DIR=/var/lib/tailscale
    - TS_USERSPACE=true
    - TS_OUTBOUND_HTTP_PROXY_LISTEN=0.0.0.0:1055
    volumes:
    - tailscale:/var/lib/tailscale
    devices:
    - /dev/net/tun:/dev/net/tun
    cap_add:
    - net_admin
    - sys_admin
    networks:
    - default
    - service
    ports:
    - ${HOST_IPv4:-127.0.0.1}:80:80
    - ${HOST_IPv4:-127.0.0.1}:443:443
    restart: unless-stopped  

  proxy:
    image: nginx:alpine
    configs:
    - source: nginx_conf
      target: /etc/nginx/conf.d/default.conf
    volumes:
    - cert:/etc/nginx/certs
    network_mode: service:vpn
    depends_on:
    - vpn
    environment:
    - NGINX_ENTRYPOINT_QUIET_LOGS=1
    restart: always
  manager:
    image: sablierapp/sablier:1.8.6
    command: 
    - start
    - --logging.level=info
    - --provider.name=docker
    - --provider.auto-stop-on-startup=true
    - --server.port=80
    - --sessions.default-duration=15m
    - --strategy.blocking.default-timeout=30s
    - --strategy.dynamic.default-theme=shuffle
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - NO_COLOR=1
    restart: always
  updates:
    image: containrrr/watchtower
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    command: --include-stopped --interval=3600
    restart: always
  dns:
    image: coredns/coredns
    ports:
    - ${HOST_IPv4:-127.0.0.1}:53:53/udp
    - ${HOST_IPv4:-127.0.0.1}:53:53/tcp
    configs:
    - source: Corefile
      target: /Corefile
    restart: always

  ca_ubuntu:
    image: alpine:3
    entrypoint: ["sh", "-c"]
    command: 
    - |
      cp -f /trusted/ca.cert /usr/local/share/ca-certificates/${DOMAIN:-localhost}.crt
      echo "Certficates are copied, dont' forget to run \`sudo update-ca-certificates\` on host"
    volumes:
    - authority:/trusted
    - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates
    env_file:
    - .env
    profiles:
    - ubuntu
  dns_ubuntu:
    image: alpine:3
    entrypoint: ["sh", "-c"]
    command: 
    - |
      cp -f /etc/resolved.conf /etc/systemd/resolved.conf.d/10-$DOMAIN.conf
      echo "resolved config added, dont' forget to run \`sudo systemctl restart systemd-resolved\` on host"
    env_file:
    - .env
    configs:
    - source: resolved_conf
      target: /etc/resolved.conf
    volumes:
    - /etc/systemd/resolved.conf.d:/etc/systemd/resolved.conf.d
    profiles:
    - ubuntu

networks:
  default:
  service:
    name: ${DOCKER_NETWORK:-service}
    driver: bridge
      
configs:
  nginx_conf:
    content: |
      server {
        listen      80 default_server;
        listen      443 ssl default_server;
        listen      [::]:80 default_server;
        listen      [::]:443 ssl default_server;
        server_name  default.$DOMAIN;

        ssl_certificate /etc/nginx/certs/ssl.cert;
        ssl_certificate_key /etc/nginx/certs/ssl.cert.key;
        # error_log /dev/null emerg;

        default_type text/plain;
        return 418 '¯\\_(ツ)_/¯\n';
      }

      server {
        listen      80;
        listen      [::]:80;
        server_name .$DOMAIN;

        return 307 https://$$host$$request_uri;
      }

      map $$host $$service {
        "~^(?<subdomain>[^\.]+)\.$DOMAIN_REGEX$$" $$subdomain;
        default "";
      }

      map $$http_user_agent $$strategy {
        default         blocking;
        "~(Chrome|Firefox|Safari|Opera|MSIE|Trident)" dynamic;
      }

      map $$service_status $$service_url {
        default         http://$$service.${DOCKER_NETWORK:-service};
        "ready"         http://$$service.${DOCKER_NETWORK:-service};
        "not-ready"     http://manager/api/strategies/dynamic?group=$$service&display_name=$$service;
      }

      map $$upstream_http_x_sablier_session_status $$service_no_cache {
        default         1;
        "ready"         0;
      }

      proxy_cache_path /opt/cache levels=1:2 keys_zone=manager:1m;

      server {
        listen          443 ssl;
        listen          [::]:443 ssl;
        server_name     *.$DOMAIN;

        ssl_certificate /etc/nginx/certs/ssl.cert;
        ssl_certificate_key /etc/nginx/certs/ssl.cert.key;

        resolver        127.0.0.11 ipv6=off valid=5s;
        default_type    text/plain;

        location / {
          auth_request            /_wakeup;
          auth_request_set        $$service_status $$upstream_http_x_sablier_session_status;

          proxy_pass              $$service_url;
          proxy_set_header        Host $$host;
          proxy_set_header        Upgrade $$http_upgrade;
          proxy_set_header        Connection "upgrade";
          proxy_set_header        X-Forwarded-For $$proxy_add_x_forwarded_for;
          proxy_set_header        X-Real-IP $$remote_addr;
          proxy_buffering         off;
          proxy_request_buffering off;
          proxy_http_version      1.1;
          client_max_body_size    0;
          error_page              502 =418 @bro;
        }

        location = /_wakeup {
          internal;
          proxy_pass              http://manager/api/strategies/$$strategy?group=$$service&display_name=$$service;

          proxy_buffering         on;
          proxy_ignore_headers    Cache-Control;

          proxy_cache             manager;
          proxy_cache_key         $$service;
          proxy_cache_valid       any 1m;
          proxy_no_cache          $$service_no_cache;

          # auth_request does not pass 404 errors, we will translate it to 200
          proxy_intercept_errors  on;
          error_page              404 =200 @bro;
        }

        location @bro {
          return                  418 'ಠ_ಠ\n';
        }
      }

  Corefile:
    content: |
      . {
        acl {
          block
        }
      }
      $DOMAIN {
        errors
        cancel
        template IN ANY $DOMAIN {
          match "^([^.]+)\.$DOMAIN_REGEX\.$$"
          answer "{{ index .Match 1 }}.$DOMAIN 60 IN CNAME $DOMAIN."
          authority "$DOMAIN. 60 IN SOA $DOMAIN. hostmaster.$DOMAIN. (1 60 60 60 60)"
          fallthrough
        }
        template IN ANY $DOMAIN {
          match "^$DOMAIN_REGEX\.$$"
          answer "$DOMAIN. 60 IN A ${HOST_IPv4:-127.0.0.1}"
          answer "$DOMAIN. 60 IN AAAA ${HOST_IPv6:-::1}"
          authority "$DOMAIN. 60 IN SOA $DOMAIN. hostmaster.$DOMAIN. (1 60 60 60 60)"
        }
      }
  resolved_conf:
    # This is used to configure host system's DNS resolver
    content: |
      [Resolve]
      DNS=${HOST_IPv4:-127.0.0.1}
      Domains=~$DOMAIN

volumes:
  tailscale:
  cert:
    name: ssl_${DOMAIN}
  authority:
