services:
  certs:
    build:
      args:
      - CA_SUBJECT=${CA_SUBJECT-/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN}
      - CERT_SUBJECT=${CERT_SUBJECT-/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN}
      - CERT_EXTENSIONS=${CERT_EXTENSIONS-subjectAltName=DNS:$DOMAIN,DNS:*.$DOMAIN}
      dockerfile_inline: |
        FROM alpine:3

        ARG CA_SUBJECT=/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN
        ARG CERT_SUBJECT=/C=US/ST=Denial/L=Springfield/O=Dis/CN=$DOMAIN
        ARG CERT_EXTENSIONS=subjectAltName=DNS:$DOMAIN,DNS:*.$DOMAIN
        
        RUN apk add --no-cache openssl && \
            mkdir -p /opt/certs
        WORKDIR /opt/certs

        # Generate Local CA
        RUN \
            # Generate CA key 
            openssl genrsa -aes256 -passout pass:pass -out ca.key 4096 && \
            # Generate CA cert 
            openssl req -x509 -new -nodes -key ca.key -utf8 -passin pass:pass -sha256 -days 3650 -out ca.crt -subj "$$CA_SUBJECT" && \
            # Generate Server Key
            openssl genrsa -out server.key 2048 && \
            # Generate Server CSR
            openssl req -new -key server.key -utf8 -out server.csr -subj "$$CERT_SUBJECT" && \
            # Generate Server Cert
            openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -passin pass:pass -CAcreateserial -out server.crt -days 825 -sha256 \
                -extfile <(echo "$$CERT_EXTENSIONS") && \
            # Clean up       
            rm -f ca.key server.csr
        
        VOLUME /certs
        VOLUME /trusted
        CMD ["sh", "-c", " \
          cp -f /opt/certs/server.key /opt/certs/server.crt /certs; \
          cp -f /opt/certs/ca.crt /trusted; \
        "]
    volumes:
    - certs:/certs
    - trusted:/trusted
  proxy:
    image: nginx:alpine
    configs:
    - source: nginx_conf
      target: /etc/nginx/nginx.conf
    volumes:
    - certs:/etc/nginx/certs
    - ./sablier.js:/etc/nginx/conf.d/sablier.js
    ports:
    - ${HOST_IPv4:-127.0.0.1}:80:80
    - ${HOST_IPv4:-127.0.0.1}:443:443
    networks:
    - default
    - service
    environment:
    - NGINX_ENTRYPOINT_QUIET_LOGS=1
    depends_on:
    - certs
    - dns
    restart: always
  controller:
    image: sablierapp/sablier:1.8.6
    command: 
    - start
    - --provider.name=docker
    - --provider.auto-stop-on-startup=true
    - --server.port=80
    - --logging.level=info
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - NO_COLOR=1
    restart: always
  watchtower:
    image: containrrr/watchtower
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    command: --include-stopped --interval=3600
    restart: always
  dns:
    image: dockurr/dnsmasq
    ports:
    - ${HOST_IPv4:-127.0.0.1}:53:53/udp
    - ${HOST_IPv4:-127.0.0.1}:53:53/tcp
    configs:
    - source: dnsmasq_conf
      target: /etc/dnsmasq.conf
    restart: always

  certs_ubuntu:
    image: alpine:3
    command: cp -f /trusted/ca.crt /usr/local/share/ca-certificates/$DOMAIN.crt
    volumes:
    - trusted:/trusted
    - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates
    env_file:
    - .env
    depends_on:
    - certs
    profiles:
    - ubuntu
  dns_ubuntu:
    image: alpine:3
    command: cp -f /etc/resolved.conf /etc/systemd/resolved.conf.d/10-$DOMAIN.conf
    env_file:
    - .env
    configs:
    - source: resolved_conf
      target: /etc/resolved.conf
    volumes:
    - /etc/systemd/resolved.conf.d:/etc/systemd/resolved.conf.d
    depends_on:
    - dns
    profiles:
    - ubuntu

networks:
  default:
  service:
    name: ${DOCKER_NETWORK:-service}
    driver: bridge
      
configs:
  nginx_conf:
    content: |
      user  nginx;
      worker_processes  auto;

      load_module modules/ngx_http_js_module.so;

      error_log  /var/log/nginx/error.log notice;
      pid        /var/run/nginx.pid;
      
      events {
        worker_connections  1024;
      }

      http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$$remote_addr - $$remote_user [$$time_local] $$host "$$request" '
                          '$$status $$body_bytes_sent "$$http_referer" '
                          '"$$http_user_agent" "$$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;
        charset         utf-8;

        keepalive_timeout  65;

        js_import conf.d/sablier.js;

        server {
          listen      80 default_server;
          listen      443 ssl default_server;
          listen      [::]:80 default_server;
          listen      [::]:443 ssl default_server;
          server_name  _;

          ssl_certificate /etc/nginx/certs/server.crt;
          ssl_certificate_key /etc/nginx/certs/server.key;
          # error_log /dev/null emerg;

          default_type text/plain;
          return 418 '¯\\_(ツ)_/¯\n';
        }

        map $$host $$sablierNames {
          # FIXME hardcoded domain name
          "~^(?<subdomain>.+)\.service\.local$$" $$subdomain;
          default "";
        }

        upstream sablier {
          server 127.0.0.1:80;
        }

        server {
          listen      127.0.0.1:80;
          server_name sablier;
          access_log  /dev/null;

          set $$sablierUrl /sablier;
          set $$sablierSessionDuration 15m;
          set $$sablierNginxInternalRedirect @redirect;

          location /sablier/ {
            internal;
            subrequest_output_buffer_size 32k;
            proxy_method GET;
            proxy_pass http://controller/;
          }

          location @redirect {
            return 302 https://$$host$$request_uri;
          }

          location / {
            set $$sablierBlockingTimeout "";
            if ($$http_user_agent !~* "Chrome|Firefox|Safari|Opera|MSIE|Trident") {
              # block request with timeout
              set $$sablierBlockingTimeout 30s;
            }
            set $$sablierDynamicShowDetails true;
            set $$sablierDynamicRefreshFrequency 5s;
            set $$sablierDynamicName $$host;
            set $$sablierDynamicTheme shuffle;
            js_content sablier.call;
          }          
        }

        server {
          listen      80;
          listen      [::]:80;
          server_name *.$DOMAIN;

          return 301 https://$$host$$request_uri;
        }

        server {
          listen      443 ssl;
          listen      [::]:443 ssl;
          server_name *.$DOMAIN;
          
          ssl_certificate /etc/nginx/certs/server.crt;
          ssl_certificate_key /etc/nginx/certs/server.key;

          location / {
            resolver                127.0.0.11 ipv6=off valid=5s;
            proxy_pass              http://$$sablierNames.${DOCKER_NETWORK:-service};
            proxy_set_header        Host $$host;
            proxy_set_header        Upgrade $$http_upgrade;
            proxy_set_header        Connection "upgrade";
            proxy_set_header        X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_set_header        X-Real-IP $$remote_addr;
            proxy_buffering         off;
            proxy_request_buffering off;
            proxy_http_version      1.1;
            client_max_body_size    0;
            error_page 502          @controller;
          }

          location @controller {
            proxy_pass              http://sablier;
            proxy_set_header        Host $$host;
            proxy_request_buffering off;
          }
        }
      }

  dnsmasq_conf:
    content: |
      local-service
      dns-forward-max=1024
      min-cache-ttl=300
      rebind-domain-ok=
      # Cloudflare DNS as upstream server
      # server=1.0.0.1
      # server=1.1.1.1
      interface=*
      address=/.$DOMAIN/${HOST_IPv4:-127.0.0.1}
      address=/.$DOMAIN/${HOST_IPv6:-::1}
  resolved_conf:
    content: |
      [Resolve]
      DNS=${HOST_IPv4:-127.0.0.1}
      Domains=~$DOMAIN

volumes:
  certs:
  trusted:
