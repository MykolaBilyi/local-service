services:
  certs:
    build:
      args:
      - domain=$DOMAIN
      dockerfile_inline: |
        FROM alpine:3

        ARG domain

        ARG CA_SUBJECT="/C=US/ST=Denial/L=Springfield/O=Dis/CN=*.$$domain"
        ARG CERT_SUBJECT=/C=US/ST=Denial/L=Springfield/O=Dis/CN=*.$$domain
        ARG CERT_EXTENSIONS=subjectAltName=DNS:*.$$domain
        
        RUN apk add --no-cache openssl && \
            mkdir -p /opt/certs
        WORKDIR /opt/certs

        # Generate Local CA
        RUN \
            # Generate CA key 
            openssl genrsa -aes256 -passout pass:pass -out ca.key 4096 && \
            # Generate CA cert 
            openssl req -x509 -new -nodes -key ca.key -passin pass:pass -sha256 -days 3650 -out ca.crt -subj "$$CA_SUBJECT" && \
            # Generate Server Key
            openssl genrsa -out server.key 2048 && \
            # Generate Server CSR
            openssl req -new -key server.key -out server.csr -subj "$$CERT_SUBJECT" && \
            # Generate Server Cert
            openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -passin pass:pass -CAcreateserial -out server.crt -days 825 -sha256 \
                -extfile <(echo "$$CERT_EXTENSIONS") && \
            # Clean up       
            rm -f ca.key server.csr
        
        VOLUME /certs
        VOLUME /trusted
        CMD ["sh", "-c", " \
          cp -f /opt/certs/server.key /opt/certs/server.crt /certs; \
          cp -f /opt/certs/ca.crt /trusted; \
        "]
    volumes:
    - certs:/certs
    - trusted:/trusted
  proxy:
    image: nginx:alpine
    configs:
    - source: nginx_conf
      target: /etc/nginx/conf.d/default.conf
    volumes:
    - certs:/etc/nginx/certs
    ports:
    - 127.0.0.1:80:80
    - 127.0.0.1:443:443
    environment:
    - NGINX_ENTRYPOINT_QUIET_LOGS=1
    depends_on:
    - certs
    restart: always
  dns:
    image: dockurr/dnsmasq
    ports:
    - 127.0.0.1:53:53/udp
    - 127.0.0.1:53:53/tcp
    configs:
    - source: dnsmasq_conf
      target: /etc/dnsmasq.conf
    restart: always

  certs_ubuntu:
    image: alpine:3
    command: cp -f /trusted/ca.crt /usr/local/share/ca-certificates/$DOMAIN.crt
    volumes:
    - trusted:/trusted
    - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates
    env_file:
    - .env
    depends_on:
    - certs
    profiles:
    - ubuntu
  dns_ubuntu:
    image: alpine:3
    command: cp -f /etc/resolved.conf /etc/systemd/resolved.conf.d/10-$DOMAIN.conf
    env_file:
    - .env
    configs:
    - source: resolved_conf
      target: /etc/resolved.conf
    volumes:
    - /etc/systemd/resolved.conf.d:/etc/systemd/resolved.conf.d
    depends_on:
    - dns
    profiles:
    - ubuntu

networks:
  default:
    name: services
    attachable: true
    
configs:
  nginx_conf:
    content: |
      server {
          listen      80 default_server;
          listen      443 ssl default_server;
          listen      [::]:80 default_server;
          listen      [::]:443 ssl default_server;
          server_name  _;

          ssl_certificate /etc/nginx/certs/server.crt;
          ssl_certificate_key /etc/nginx/certs/server.key;
          # error_log /dev/null emerg;

          return 418;
      }

      server {
          listen      80;
          listen      [::]:80;
          server_name *.$DOMAIN;

          return 301 https://$$host$$request_uri;
      }

      server {
          listen      443 ssl;
          listen      [::]:443 ssl;
          server_name *.$DOMAIN;
          
          ssl_certificate /etc/nginx/certs/server.crt;
          ssl_certificate_key /etc/nginx/certs/server.key;

          set $$service "";
          if ($$host ~* ^([a-z0-9-]+)\.\w+\.\w+$) {
              set $$service $$1;
          }
          if ($$service = "") {
              return 418;
          }

          location / {
              resolver            127.0.0.11 ipv6=off valid=5s;
              proxy_pass          http://$$service:8080;
              proxy_set_header    Host $$host;
              proxy_set_header    Connection "";
              proxy_set_header    X-Real-IP $$remote_addr;
              proxy_buffering     off;
              proxy_http_version  1.1;
          }

          error_page 502 @unavailable;
          
          location @unavailable {
              return 418;
          }
      }

  dnsmasq_conf:
    content: |
      local-service
      dns-forward-max=1024
      min-cache-ttl=300
      rebind-domain-ok=
      # Cloudflare DNS as upstream server
      server=1.0.0.1
      server=1.1.1.1
      interface=*
      address=/.$DOMAIN/127.0.0.1
      address=/.$DOMAIN/::1
  resolved_conf:
    content: |
      [Resolve]
      DNS=127.0.0.1
      Domains=~$DOMAIN

volumes:
  certs:
  trusted:
